name: CI/CD Pipeline
# Nom du workflow CI/CD

on:
  push:
    branches:
      - dev               # Exécute les tests sur la branche d'intégration principale
      - dev-frontend      # Exécute les tests sur la branche de développement frontend
      - dev-backend       # Exécute les tests sur la branche de développement backend
      - main              # Déploie lorsque le push est effectué sur la branche main
  pull_request:
    branches:
      - dev
      - dev-frontend
      - dev-backend
      # Lance les tests lors de la création ou mise à jour d'une pull request vers ces branches

jobs:
  test:
    name: Test Backend et Frontend
    # Job pour exécuter les tests dans les dossiers backend et frontend
    runs-on: ubuntu-latest
    # Utilise une machine virtuelle Ubuntu
    strategy:
      matrix:
        folder: [backend, frontend]
        # La matrice permet de lancer ce job pour chacun des dossiers (backend et frontend)
    steps:
      - name: Check out code
        # Récupère le code source du dépôt
        uses: actions/checkout@v2

      - name: Setup Node.js
        # Configure Node.js pour l'environnement CI
        uses: actions/setup-node@v3
        with:
          node-version: 16
          # Spécifie la version de Node.js à utiliser

      - name: Install dependencies and run tests in ${{ matrix.folder }}
        # Installe les dépendances et exécute les tests dans le dossier (backend ou frontend)
        working-directory: ${{ matrix.folder }}
        run: |
          npm install                 # Installe les dépendances du projet
          npm run test                # Exécute les tests (définis dans package.json)

  deploy:
    name: Déploiement sur Production
    # Job de déploiement (exécuté uniquement sur la branche main)
    if: github.ref == 'refs/heads/main'
    # Ce job ne s'exécute que lorsqu'un push est effectué sur la branche main
    runs-on: ubuntu-latest
    # Utilise une machine virtuelle Ubuntu
    needs: test
    # Ce job dépend du succès du job "test"
    steps:
      - name: Check out code
        # Récupère le code source du dépôt
        uses: actions/checkout@v2

      - name: Setup Node.js
        # Configure Node.js pour le job de déploiement
        uses: actions/setup-node@v3
        with:
          node-version: 16
          # Spécifie la version de Node.js à utiliser

      - name: Build Frontend
        # Construit l'application frontend (React)
        working-directory: frontend
        run: |
          npm install                 # Installe les dépendances du frontend
          npm run build               # Compile l'application React en mode production

      - name: Build Backend (si nécessaire)
        # Construit l'application backend, si une étape de build est requise
        working-directory: backend
        run: |
          npm install                 # Installe les dépendances du backend
          npm run build               # Exécute le build du backend (s'il y en a un)

      - name: Deploy
        # Étape de déploiement simulé (pour un petit projet sans conteneurs ou serveur dédié)
        run: |
          echo "Déploiement de l'application..."
          echo "Archivage des artefacts de build"
          echo "Les builds sont prêts pour être déployés ou récupérés."

      - name: Upload Frontend Build Artifact
        # Archive le build du frontend pour le rendre disponible dans les Artifacts de GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: frontend/build

      - name: Upload Backend Artifact
        # Archive le build ou le code du backend pour le rendre disponible
        uses: actions/upload-artifact@v2
        with:
          name: backend-artifact
          path: backend
